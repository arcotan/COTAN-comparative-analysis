---
title: Clustering and differential expression analysis using COTAN
---


```{r, output=FALSE, warning=FALSE}
library(COTAN)
library(Seurat)
library(tibble)
library(ggplot2)
library(zeallot)
library(rjson)
source("./utils.R")
options(parallelly.fork.enable = TRUE)

numCores = 8
defaultGDIThreshold = 1.4
numTopMarkers = 500
minClusterSize = 0

datasetName = 'PBMC1' # modify this
datasetPath = paste("./data/", datasetName, sep='')
inDir = paste(datasetPath, '/filtered/', sep='')
outDir = paste(datasetPath, '/COTAN/', sep='')
outDirDefault = paste(outDir, 'default/', sep='')
outDirCelltypist = paste(outDir, 'celltypist/', sep='')
outDirAntibody = paste(outDir, 'antibody/', sep='')

if (!dir.exists(outDirDefault)) {
  dir.create(outDirDefault, recursive = TRUE)
}
if (!dir.exists(outDirCelltypist)) {
  dir.create(outDirCelltypist, recursive = TRUE)
}
if (!dir.exists(outDirAntibody)) {
  dir.create(outDirAntibody, recursive = TRUE)
}

numClusterThreshold = 1/10
numClusterCelltypist = fromJSON(file=paste(datasetPath, '/celltypist/nclusters.json', sep=''))$nclusters
minNumClusterCelltypist = numClusterCelltypist - numClusterThreshold*numClusterCelltypist
maxNumClusterCelltypist = numClusterCelltypist - numClusterThreshold+numClusterCelltypist
numClusterAntibody = fromJSON(file=paste(datasetPath, '/antibody_annotation/nclusters.json', sep=''))$nclusters
minNumClusterAntibody = round(numClusterAntibody - numClusterThreshold*numClusterAntibody)
maxNumClusterAntibody = round(numClusterAntibody + numClusterThreshold*numClusterAntibody)

setLoggingLevel(2)
setLoggingFile(file.path(outDir, paste(datasetName, ".log", sep='')))
```

Data loading

```{r}
PBMC <- readRDS(file = file.path(inDir, paste0(datasetName, ".cotan.RDS")))
```

Calculate genesâ€™ COEX

```{r, echo=TRUE, eval=FALSE}
PBMC <- proceedToCoex(
  PBMC,
  calcCoex = TRUE,
  cores = numCores,
  saveObj = TRUE,
  outDir = outDir
)
```

```{r, echo=TRUE, eval=TRUE}
gdiData <- calculateGDI(PBMC)
genesToLabel <- head(
  rownames(gdiData[order(gdiData[["GDI"]], decreasing = TRUE), ]),
  n = 50L
)
sort(genesToLabel)
```

```{r, echo=TRUE, eval=TRUE}
gdiData[genesToLabel[[50L]], "GDI"]
```

```{r, echo=TRUE, eval=TRUE}
gdiPlot <- GDIPlot(
  PBMC,
  GDIIn = gdiData,
  GDIThreshold = defaultGDIThreshold,
  genes = list("Top 10 GDI genes" = genesToLabel[1L:10L])
)
plot(gdiPlot)
```

Clustering

```{r, echo=TRUE, eval=FALSE}
c(splitClusters, splitCoexDF) %<-%
  cellsUniformClustering(
    PBMC,
    GDIThreshold = defaultGDIThreshold,
    cores = numCores,
    saveObj = TRUE,
    outDir = outDir
  )

PBMC <- addClusterization(
  PBMC,
  clName = "split",
  clusters = splitClusters,
  coexDF = splitCoexDF,
  override = TRUE
)
```

```{r, echo=TRUE, eval=TRUE}
splitClusters <- getClusterizationData(PBMC, clName = "split")[[1]]
table(splitClusters)
```

Merge uniform clusters

```{r, echo=TRUE, eval=FALSE}
c(mergedClusters, mergedCoexDF) %<-%
  mergeUniformCellsClusters(
    PBMC,
    clusters = splitClusters,
    GDIThreshold = defaultGDIThreshold,
    cores = numCores,
    saveObj = TRUE,
    outDir = outDir
  )

PBMC <- addClusterization(
  PBMC,
  clName = "merged",
  clusters = mergedClusters,
  coexDF = mergedCoexDF,
  override = TRUE
)
```

```{r, echo=TRUE, eval=TRUE}
mergedClusters <- getClusterizationData(PBMC, clName = "merged")[[1]]
clusters_sizes = table(mergedClusters)
cat(paste('Number of clusters found: ', nrow(clusters_sizes), sep=''))
```

Save the clustering result

```{r, echo=TRUE, eval=FALSE}
clustersDf = as.data.frame(mergedClusters)
colnames(clustersDf)[colnames(clustersDf) == deparse(substitute(mergedClusters))] <- "cluster"
clustersDf$cluster = match(clustersDf$cluster, levels(mergedClusters))
clustersDf$cell = rownames(clustersDf)
rownames(clustersDf) = c(1:nrow(clustersDf))
write_clustering(outDirDefault, clustersDf, "cell", "cluster")
```

Differential expression

```{r, echo=TRUE, eval=FALSE}
coexDF <- DEAOnClusters(PBMC, clusters = mergedClusters)
PBMC <- addClusterizationCoex(
  PBMC,
  clName = "merged",
  coexDF = coexDF
)
```

```{r, echo=TRUE, eval=FALSE}
saveRDS(PBMC, file = file.path(outDirDefault, paste0(datasetName, ".cotan.RDS")))
```

Save markers

```{r, echo=TRUE, eval=FALSE}
write_cotan_markes = function(ourDir, clusters, coex, numTopMarkers, decreasing) {
    markers = data.frame()

    for (cluster_id in (levels(clusters))) {
        cluster_markers = data.frame()
        pv = coex[, cluster_id]
        names(pv) = rownames(coex)
        sorted_pv = sort(pv, decreasing = decreasing)
        cluster_markers = data.frame(gene = names(sorted_pv)[1:numTopMarkers],
                                    cluster = match(cluster_id, levels(clusters)),
                                    rank = 1:numTopMarkers)
        markers = rbind(markers, cluster_markers)
    }
    colnames(markers) = c("gene","cluster","rank")

    write.csv(markers, "markers.csv", row.names = FALSE)
}

numCells <- getNumCells(PBMC)
pvalsDefault <- pValueFromDEA(coexDF, numCells)
write_cotan_markes(outDirDefault, mergedClusters, pvalsDefault, numTopMarkers, FALSE)
```

Merge clusters according to celltypist

```{r, echo=TRUE, eval=FALSE}
# get ids of clusters bigger than minClusterSize cells
mapping = read.csv(paste(datasetPath, '/celltypist/celltypist_mapping.csv', sep=''))
counts = read.csv(paste(datasetPath, '/celltypist/celltypist_annotation_counts.csv', sep=''))
mappingCounts = merge(mapping, counts, by.x = "go", by.y = "cluster.ids")
mappingCounts = subset(mappingCounts, count > minClusterSize)
clusterIdsToKeep = mappingCounts$id

# get barcodes of cells in clusters bigger than minClusterSize cells
celltypistLabels = read.csv(paste(datasetPath, '/celltypist/celltypist_labels.csv', sep=''))
celltypistLabels = subset(celltypistLabels, cluster.ids %in% clusterIdsToKeep)
barcodesToKeep = celltypistLabels$cell
barcodesToKeep = substring(barcodesToKeep, 1, nchar(barcodesToKeep) - 2)

# keep only cells in clusters bigger than minClusterSize cells
barcodesToDrop = getCells(PBMC)[!getCells(PBMC) %in% barcodesToKeep]
if (length(barcodesToDrop) != 0) {
  PBMCCelltypist <- dropGenesCells(PBMC, cells = barcodesToDrop)
} else {
  PBMCCelltypist <- PBMC
}

# binary search on GDIThreshold to match the number of clusters found by celltypist
maxGDIThreshold = 3
minGDIThreshold = 0
repeat{
  GDIThreshold = (maxGDIThreshold + minGDIThreshold) / 2
  cat(paste("Trying GDIThreshold ", GDIThreshold, sep=''))
  c(celltypistClusters, celltypistCoexDF) %<-%
  mergeUniformCellsClusters(
    PBMCCelltypist,
    clusters = splitClusters,
    GDIThreshold = GDIThreshold,
    cores = numCores,
    saveObj = TRUE,
    outDir = outDirCelltypist
  )
  PBMCCelltypist <- addClusterization(
    PBMCCelltypist,
    clName = "merged_celltypist",
    clusters = celltypistClusters,
    coexDF = celltypistCoexDF,
    override = TRUE
  )
  celltypistClusters <- getClusterizationData(PBMCCelltypist, clName = "merged_celltypist")[[1]]
  numClusters = nrow(table(celltypistClusters))
  cat(paste("Got ", numClusters, ' clusters', sep=''))
  if (numClusters >= minNumClusterCelltypist & numClusters < maxNumClusterCelltypist){
    break
  }
  else if (numClusters < minNumClusterCelltypist){
    # increase GDIThreshold
    minGDIThreshold = GDIThreshold
  }
  else{
    # reduce GDIThreshold
    maxGDIThreshold = GDIThreshold
  }
}
```

Save the clustering result

```{r, echo=TRUE, eval=FALSE}
celltypistClustersDf = as.data.frame(celltypistClusters)
colnames(celltypistClustersDf)[colnames(celltypistClustersDf) == deparse(substitute(celltypistClusters))] <- "cluster"
celltypistClustersDf$cluster = match(celltypistClustersDf$cluster, levels(celltypistClusters))
celltypistClustersDf$cell = rownames(celltypistClustersDf)
rownames(celltypistClustersDf) = c(1:nrow(celltypistClustersDf))
write_clustering(outDirCelltypist, celltypistClustersDf, "cell", "cluster")
```

Differential expression

```{r, echo=TRUE, eval=FALSE}
celltypistCoexDF <- DEAOnClusters(PBMCCelltypist, clusters = celltypistClusters)
PBMCCelltypist <- addClusterizationCoex(
  PBMCCelltypist,
  clName = "merged_celltypist",
  coexDF = celltypistCoexDF
)
```

```{r, echo=TRUE, eval=FALSE}
saveRDS(PBMC, file = file.path(outDirCelltypist, paste0(datasetName, ".cotan.RDS")))
```

Save markers

```{r, echo=TRUE, eval=FALSE}
celltypistNumCells <- getNumCells(PBMCCelltypist)
celltypistPvals <- pValueFromDEA(celltypistCoexDF, celltypistNumCells)
write_cotan_markes(outDirCelltypist, celltypistClusters, celltypistPvals, numTopMarkers, FALSE)
```

Merge clusters according to protein surface

```{r, echo=TRUE, eval=FALSE}
# get barcodes of cells labelled using antibody data
antibodyLabels = read.csv(paste(datasetPath, '/antibody_annotation/antibody_labels.csv', sep=''))
barcodesToKeep = antibodyLabels$cell

# barcodesToKeep = substring(barcodesToKeep, 1, nchar(barcodesToKeep) - 2) # TODO: ?

# keep only cells labelled with antibody data
barcodesToDrop = getCells(PBMC)[!getCells(PBMC) %in% barcodesToKeep]
if (length(barcodesToDrop) != 0) {
  PBMCAntibody <- dropGenesCells(PBMC, cells = barcodesToDrop)
} else {
  PBMCAntibody <- PBMC
}

# binary search on GDIThreshold to match the number of clusters found by celltypist
maxGDIThreshold = 3
minGDIThreshold = 0
repeat{
  GDIThreshold = (maxGDIThreshold + minGDIThreshold) / 2
  cat(paste("Trying GDIThreshold ", GDIThreshold, sep=''))
  c(abtibodyClusters, antibodyCoexDF) %<-%
  mergeUniformCellsClusters(
    PBMCAntibody,
    clusters = splitClusters,
    GDIThreshold = GDIThreshold,
    cores = numCores,
    saveObj = TRUE,
    outDir = outDirAntibody
  )
  PBMCAntibody <- addClusterization(
    PBMCAntibody,
    clName = "merged_antibody",
    clusters = antibodyClusters,
    coexDF = antibodyCoexDF,
    override = TRUE
  )
  antibodyClusters <- getClusterizationData(PBMCAntibody, clName = "merged_antibody")[[1]]
  numClusters = nrow(table(antibodyClusters))
  cat(paste("Got ", numClusters, ' clusters', sep=''))
  if (numClusters >= minNumClusterAntibody & numClusters <= maxNumClusterAntibody){
    break
  }
  else if (numClusters < minNumClusterAntibody){
    # increase the GDIThreshold
    minGDIThreshold = GDIThreshold
  }
  else{
    # reduce the GDIThreshold
    maxGDIThreshold = GDIThreshold
  }
}
```

Save the clustering result

```{r, echo=TRUE, eval=FALSE}
antibodyClustersDf = as.data.frame(antibodyClusters)
colnames(antibodyClustersDf)[colnames(antibodyClustersDf) == deparse(substitute(antibodyClusters))] <- "cluster"
antibodyClustersDf$cluster = match(antibodyClustersDf$cluster, levels(antibodyClusters))
antibodyClustersDf$cell = rownames(antibodyClustersDf)
rownames(antibodyClustersDf) = c(1:nrow(antibodyClustersDf))
write_clustering(outDirAntibody, antibodyClustersDf, "cell", "cluster")
```

Differential expression

```{r, echo=TRUE, eval=FALSE}
antibodyCoexDF <- DEAOnClusters(PBMCAntibody, clusters = antibodyClusters)
PBMCAntibody <- addClusterizationCoex(
  PBMCAntibody,
  clName = "merged_antibody",
  coexDF = antibodyCoexDF
)
```

```{r, echo=TRUE, eval=FALSE}
saveRDS(PBMC, file = file.path(outDirAntibody, paste0(datasetName, ".cotan.RDS")))
```

Save markers

```{r, echo=TRUE, eval=FALSE}
numCells <- getNumCells(PBMCAntibody)
antibodyPvals <- pValueFromDEA(antibodyCoexDF, numCells)
write_cotan_markes(OUT_PROTEIN_DIR, antibodyClusters, antibodyPvals, numTopMarkers, FALSE)
```

```{r, echo=TRUE, eval=TRUE}
sessionInfo()
```