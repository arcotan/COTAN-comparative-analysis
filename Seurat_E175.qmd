---
title: Clustering and differential expression analysis using Seurat
---

```{r}
library(dplyr)
library(rjson)
library(Seurat)
library(patchwork)
library(DropletUtils)
library(rjson)
source("./utils.R")
```

Data loading and preparation

```{r}
numTopMarkers = 500
minClusterSize = 0

datasetName = 'E175'
datasetPath = paste("./data/", datasetName, sep='')

outDir = paste(datasetPath, '/seurat/', sep='')
outDirDefault = paste(outDir, 'default/', sep='')
outDirCelltypist = paste(outDir, 'celltypist/', sep='')

if (!dir.exists(outDirDefault)) {
  dir.create(outDirDefault, recursive = TRUE)
}
if (!dir.exists(outDirCelltypist)) {
  dir.create(outDirCelltypist, recursive = TRUE)
}

numClusterThreshold = 1/10
numClusterCelltypist = fromJSON(file=paste(datasetPath, '/nclusters.json', sep=''))$nclusters
minNumClusterCelltypist = round(numClusterCelltypist - numClusterThreshold*numClusterCelltypist)
maxNumClusterCelltypist = round(numClusterCelltypist + numClusterThreshold*numClusterCelltypist)
```

Dataset loading

```{r}
matrix <- read.csv(paste(datasetPath, 'CorticalCells_GSM2861514_E175_cleaned.csv', sep='/'), header = TRUE, row.names = 1)
#matrix <- t(matrix)
e175 <- CreateSeuratObject(counts = matrix, min.cells = 0, min.features = 0)
```

Studying feature variance

```{r}
plot(log(sort(apply(matrix,1,var), decreasing=TRUE)))
```

Data normalization

```{r}
e175 <- NormalizeData(e175, normalization.method = "LogNormalize", scale.factor = 10000)
```

Feature selection

```{r}
e175 <- FindVariableFeatures(e175, selection.method = "vst", nfeatures = 2000) # nfeatures chosen based on elbow plot above
VariableFeaturePlot(e175)
```

Feature scaling

```{r}
all.genes <- rownames(e175)
e175 <- ScaleData(e175, features = all.genes)
```

Clustering with default parameters

Plot pca explained variance ratio to choose number of components

```{r}
e175 <- RunPCA(e175, features = VariableFeatures(object = e175))
ElbowPlot(object = e175, ndims = 50)
```

Perform the clustering with default parameters

```{r}
e175 <- FindNeighbors(e175, dims = 1:16) # chosen based on elbow plot above
e175 <- FindClusters(e175)
```

Save the default clustering results

```{r}
defaultLabelsDf = data.frame(Idents(e175))
defaultLabelsDf$cell <- rownames(defaultLabelsDf)
rownames(defaultLabelsDf) <- 1:nrow(defaultLabelsDf)
colnames(defaultLabelsDf)[colnames(defaultLabelsDf) == "Idents.e175."] <- "computed_id"
defaultLabelsDf$computed_id <- as.numeric(defaultLabelsDf$computed_id)
write_clustering(outDirDefault, defaultLabelsDf, "cell", "computed_id")
```

Differential expression on default clustering results

```{r}
e175.markers <- FindAllMarkers(e175)
```

Save markers

```{r}
e175.markers$cluster <- as.numeric(e175.markers$cluster)
write_markers(outDirDefault, e175.markers, "gene", "cluster", "p_val_adj", FALSE, numTopMarkers)
```

Clustering tuning resolution according to celltypist

```{r}
cat(paste("Clusters to find:", numClusterCelltypist), sep='')
```

Perform the clustering tuning resolution according to celltypist

```{r}
e175 <- FindNeighbors(e175, dims = 1:16) # chosen based on elbow plot above

maxResolution = 10 # TODO: why so high?
minResolution = 0

repeat{
  resolution = (maxResolution + minResolution) / 2
  cat(paste("Trying resolution ", resolution, sep=''))
  e175<- FindClusters(e175, resolution=resolution)
  numClusters = nlevels(Idents(e175))
  cat(paste("Got ", numClusters, ' clusters', sep=''))
  if (numClusters >= minNumClusterCelltypist & numClusters <= maxNumClusterCelltypist){
    break
  }
  else if (numClusters < minNumClusterCelltypist){
    # increase the resolution
    minResolution = resolution
  }
  else{
    # reduce the resolution
    maxResolution = resolution
  }
}
```

Save the clustering tuned according to celltypist

```{r}
celltypistLabelsDf = data.frame(Idents(e175))
celltypistLabelsDf$cell <- rownames(celltypistLabelsDf)
rownames(celltypistLabelsDf) <- 1:nrow(celltypistLabelsDf)
colnames(celltypistLabelsDf)[colnames(celltypistLabelsDf) == "Idents.e175."] <- "computed_id"
celltypistLabelsDf$computed_id <- as.numeric(celltypistLabelsDf$computed_id)
write_clustering(outDirCelltypist, celltypistLabelsDf, "cell", "computed_id")
```

Differential expression on clustering results tuned according to celltypist

```{r}
e175.markers <- FindAllMarkers(e175)
```

Save markers

```{r}
e175.markers$cluster <- as.numeric(e175.markers$cluster)
write_markers(outDirCelltypist, e175.markers, "gene", "cluster", "p_val_adj", FALSE, numTopMarkers)
```

```{r}
sessionInfo()
```